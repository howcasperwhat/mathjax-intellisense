import{_ as i,c as a,o as e,ae as n}from"./chunks/framework.ry4xUpQ6.js";const c=JSON.parse('{"title":"preload","description":"","frontmatter":{},"headers":[],"relativePath":"configs/preload.md","filePath":"configs/preload.md"}'),t={name:"configs/preload.md"};function l(p,s,h,d,o,k){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="preload" tabindex="-1"><code>preload</code> <a class="header-anchor" href="#preload" aria-label="Permalink to &quot;\`preload\`&quot;">â€‹</a></h1><p><strong>Type</strong>: <code>string[]</code></p><p><strong>Default</strong>: <code>[]</code></p><p>You may need to define custom commands. The <code>preload</code> configuration allows you to preload these predefined commands at startup. You need to provide a series of <code>glob</code> patterns, and the extension will automatically load the corresponding commands inside matched files.</p><p>e.g.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;mathjax-intellisense.preload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;*.preload.cls&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-tex vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">% File: example.preload.cls</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\newcommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\circle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\bullet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\definecolor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{info}{RGB}{0, 153, 255}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\definecolor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{warning}{RGB}{252, 186, 3}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\DeclarePairedDelimiter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\lcro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\lbrack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\rparen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\renewcommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\boxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,7)]))}const E=i(t,[["render",l]]);export{c as __pageData,E as default};
